<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>How to embed arbitrary content in your WPF control</title>
    <style type="text/css">
        .UserContent
        {
            color: Gray;
            font-family:Times New Roman;
            font-size:medium;
        }
    </style>
</head>
<body>
<h1>How to Embed Arbitrary Content in a WPF Control</h1>
<a href="#SourceCode">Jump to source code</a>
<h2>Introduction</h2>
<p>"Upgrading" simple XAML fragments to user controls is easy. You add a new user 
control to the project, specify the contents in the control's XAML file:</p>

<pre><code>&lt;<font color="red">UserControl</font> x:Class="<font color="red">MyNamespace.MyControl</font>" ... &gt;
    &lt;StackPanel Orientation="Vertical"&gt;
        &lt;Label&gt;Foo&lt;/Label&gt;        
        &lt;Label&gt;Bar&lt;/Label&gt;
    &lt;/StackPanel&gt;
&lt;<font color="red">/UserControl</font>&gt;</code></pre>

<p>Then you can use the control in your window or page by specifying its tag:</p>

<pre><code>&lt;Window xmlns:local="<font color="red">clr-namespace:MyNamespace"</font> ...&gt;
    &lt;<font color="red">local:MyControl</font> /&gt;
&lt;/Window&gt;</code></pre>

<h2>Naive Attempt</h2>
<p>However, what if you wanted to add user supplied content to the control? Something like a button
that can contain arbitrary XAML? My first attempt was utterly naive and failed miserably:</p>

<pre><code><font color="green">&lt;!-- don't do this at home --&gt;</font> 
&lt;UserControl x:Class="MyNamespace.MyControl" ... &gt;
    &lt;StackPanel Orientation="Vertical"&gt;
        &lt;Label&gt;Foo&lt;/Label&gt;        
        <font color="red">&lt;ContentPresenter /&gt;</font>
        &lt;Label&gt;Bar&lt;/Label&gt;
    &lt;/StackPanel&gt;
&lt;/UserControl&gt;
...
&lt;Window xmlns:local="clr-namespace:MyNamespace" ...&gt;
    <font color="red">&lt;local:MyControl&gt;User supplied content here&lt;/local:MyControl&gt;</font>
&lt;/Window&gt;</code></pre>

<p>Simply put, this does not work. We end up defining user control's Content property twice: once inside 
the user control XAML, and once inside Window XAML. In this case, Window XAML wins, and the only thing
you will see is the text <i>User supplied content here</i>. Neither <i>Foo</i>, nor <i>Bar</i> are shown,
and <code>ContentPresenter</code> has no effect.</p>

<h2>Quick and Dirty Attempt</h2>
<p><code>ContentPresenter</code> works only inside a <code>&lt;ControlTemplate&gt;</code>. So,
to achieve our goals in a brute-force kind of way, we can just assign a control template to our
user control. WPF seems to have no problem applying control template to a <code>UserControl</code>,
despite an <a href="http://msdn.microsoft.com/en-us/library/ms745025.aspx">MSDN article</a> claiming
it is not possible.</p>

<pre><code>&lt;UserControl x:Class="QuickAndDirtyAttempt.Decorator" ...
    <font color="red">&lt;UserControl.Template&gt;
        &lt;ControlTemplate <b style="background:yellow">TargetType="{x:Type local:Decorator}"</b>&gt;</font>
            &lt;StackPanel Orientation="Vertical"&gt;
                &lt;Label&gt;Foo&lt;/Label&gt;
                &lt;ContentPresenter /&gt;
                &lt;Label&gt;Bar&lt;/Label&gt;
            &lt;/StackPanel&gt;
        <font color="red">&lt;/ControlTemplate&gt;
    &lt;/UserControl.Template&gt;</font>
&lt;/UserControl></code></pre>

Note the <code>TargetType</code> property on the template: without it the project will happily compile, but the 
<code>ContentPresenter</code> will not work.

<pre><code>&lt;Window ... &gt;
    &lt;StackPanel Orientation="Vertical"&gt;
        <font color="red">&lt;local:Decorator&gt;
            &lt;Label Background="Wheat"&gt;User supplied content here&lt;/Label&gt;
        &lt;/local:Decorator&gt;</font>
    &lt;/StackPanel&gt;
&lt;/Window&gt;</code></pre>

<img src="img/QuickAndDirtyAttempt.png" alt="Screenshot of the quick and dirty attempt" />

<h2>Why Quick and Dirty Solution is Dirty</h2>
<p>There are several problems with the quick and dirty solution. We all know about the 
separation between the UI and the business logic. WPF takes this one step further - it strictly
suggests separating <i>presentation logic</i> and actual rendering. This may sound odd at first,
but it does bring enormous flexibility.</p>

<p>WPF controls are said to be "look-less". For example, the checkbox control only handles 
checkbox state (on, off, undefined), and transitions between those states. It <b>does not</b>
define the look of the check box, or where the checkbox labels are rendered. This is a job
of the control template. Default control template shows familiar square on the left and the
rest of the content on the right, but users can define their own control templates where 
checkbox looks nothing like a square.</p>

<p>Our case has absolutely no presentation logic, so we don't really need a custom control in
the first place. We can accomplish the same goal by taking a simple control (e.g. 
<code>ContentControl</code> and supplying a template for it. This is a solution to
80% of your GUI problems - WPF may already have a control that does the job, you
just need to supply a new template. If we did have some custom presentation logic,
we would need to create our own custom control, and supply a default template for it.
I will demonstrate both solutions.</p>

<h2>Using ContentControl</h2>
<p>We define our custom tempalte in application resources:</p>
<pre><code>&lt;Application ...&gt;
    <font color="red">&lt;Application.Resources&gt;
        &lt;ControlTemplate x:Key="Decorator" TargetType="ContentControl"&gt;</font>
            &lt;StackPanel Orientation="Vertical" &gt;
                &lt;Label&gt;Foo&lt;/Label&gt;
                &lt;ContentPresenter /&gt;
                &lt;Label&gt;Bar&lt;/Label&gt;
            &lt;/StackPanel&gt;
        &lt;/ControlTemplate&gt;
    &lt;/Application.Resources&gt;
&lt;/Application&gt;</code></pre>

<p>Then we use <code>ContentControl</code> in our window, specifying the template as follows:</p>
<pre><code>&lt;Window ... &gt;
    &lt;StackPanel Orientation="Vertical"&gt;
        <font color="red">&lt;ContentControl Template="{StaticResource Decorator}"&gt;
            &lt;Label Background="Yellow"&gt;User supplied content here&lt;/Label&gt;
        &lt;/ContentControl&gt;</font>
    &lt;/StackPanel&gt;
&lt;/Window&gt;</code></pre>

<p>I do wish the template name syntax were less verbose, but I don't think it can be simplified here.
If we want to specify other properties of the control together with the template, we may define a
custom control style instead of setting the template directly. The style would then have a setter for
the template property. However, I believe that in this particular case it would be an unnecessary 
complication.</p>

<img src="img/UsingContentControl.png" alt="Screenshot of using ContentControl" />

<h2>Using Custom Control</h2>
<p>Custom control is the haviest way to customize WPF, and it should be used only when necessary. 
If you think you need a custom control, first try to find an existing control that satisfies 
your needs. Remember that WPF controls are pure logic plus a default look-and-feel template
(<code>&lt;ControlTempalte&gt;</code> in WPF speak). This template can be overhauled dramatically, 
as shown <a href="http://msdn.microsoft.com/en-us/magazine/cc163497.aspx">in this Charles Petzold's article</a>.</p>

<p>If your customizations go beyond look and feel and involve some presentation logic, custom control
is probably a good answer. But even then it may a good idea to derive your control from one of existing
controls such as <code>ContentControl</code>. Typically, your custom control(s) will live in their 
own assembly, and this assembly will be referenced by user applications.</p>

<p>We are going to create a control called <code>HeaderFooterControl</code>, which defines two custom properties:
<code>Header</code> and <code>Footer</code>. You would use <code>Decorator</code> as follows:</p>

<pre><code>&lt;my:HeaderFooterControl&gt;
    &lt;my:HeaderFooterControl.Header&gt;
        <span class="UserContent">header content here</span>
    &lt;/my:HeaderFooterControl.Header&gt;
    &lt;my:HeaderFooterControl.Footer&gt;
        <span class="UserContent">footer content here</span>
    &lt;/my:HeaderFooterControl.Footer&gt;
    <span class="UserContent">main control content here</span>
&lt;/my:HeaderFooterControl></code></pre>

<p>If you right click on your project, and choose Add &rarr; "Add New Item" &rarr; WPF &rarr; "Custom Control (WPF)" 
Visual Studio generates the boilerplate for your control. This includes the skeleton <code>.cs</code> file and
default control template in <code>generic.xaml</code>.</p>

<img src="img/AddingCustomControl.png" alt="Adding custom WPF control in Visual Studio"/>

<p>By default your control is derived from WPF <code>Control</code> class, but we 
can do better by inheriting <code>HeaderedContentControl</code>. It has everything we need except for the footer. Generally,
you should attempt deriving your control from the most appropriate basic WPF class (the diagram is taken from <a href="http://www.orbifold.net/default/?p=597">here</a>):</p>

<img src="img/CustomControlHierarchy.jpg" alt="WPF custom control hierarchy" />

<p>Next step is to define a dependency property for Footer: the shortcut for that is right click 
inside your <code>.cs</code> file, then Insert snippet &rarr; NetFX3d &rarr; Dependency Proeprty.
The property is of type <code>object</code>, because the footer can contain any user-defined content.</p>

<pre><code>public static readonly DependencyProperty FooterProperty =
   DependencyProperty.Register("Footer", typeof(object), typeof(HeaderFooterControl), new UIPropertyMetadata(null));</code></pre>
   
<p>Then we define our control template in the <code>Generic.xaml</code>. We use <code>ContentPresenter</code>
to show arbitrary user content from header, footer, and main control body:</p>

<pre><code>&lt;Style TargetType="{x:Type local:HeaderFooterControl}"&gt;
    &lt;Setter Property="Template"&gt;
        &lt;Setter.Value&gt;
            &lt;ControlTemplate TargetType="{x:Type local:HeaderFooterControl}"&gt;
                <font color="red">&lt;StackPanel Orientation="Vertical"&gt;
                    &lt;ContentPresenter ContentSource="Header" /&gt;
                    &lt;ContentPresenter /&gt;
                    &lt;ContentPresenter ContentSource="Footer" /&gt;
                &lt;/StackPanel&gt;</font>
            &lt;/ControlTemplate&gt;
        &lt;/Setter.Value&gt;
    &lt;/Setter&gt;
&lt;/Style&gt;</code></pre>

<p>We can also map our C# namespace to an XML namespace by applying the following attribute
to the controls assembly:</p>

<pre><code>[assembly:XmlnsDefinition("http://ikriv.com/xaml/samples/DisplayingContent/CustomControl/MyControls", "MyControls")]</code></pre>

<p>Now, in the user application we can reference our control library and say in <code>Window1.xaml</code>:</p>

<pre><code>&lt;Window xmlns:my="http://ikriv.com/xaml/samples/DisplayingContent/CustomControl/MyControls" ...&gt;
    &lt;my:HeaderFooterControl&gt;...&lgt;/my:HeaderFooterControl&gt;
&lt;/Window&gt;</code></pre>

<p>Here is the screenshot of our aplication using custom control:</p>

<img src="img/UsingCustomControl.png" alt="Screenshot of using custom control" />

<h2>What Option to Choose</h2>

<p>I have described three different options for embedding user-defined content in your control:</p>
<ul>
<li>Quick-and-dirty option with <code>UserControl</code> and <code>ControlTempalte</code>.</li>
<li>Better option with <code>ContentControl</code> and <code>ControlTemplate</code>.</li>
<li>Heavy option with custom WPF control.</li>
</ul>

<p>You rarely want to use the quick-and-dirty option - maybe only as a temporary measure, but
remember that temporary measures of today tend to become the legacy code of tomorrow.
Use <code>ContentControl</code> if all you need is to display some stuff. Use custom control
if you have your own presentation logic. For instance, you may want to show/hide header or
footer by setting <code>HeaderVisible</code> and <code>FooterVisible</code>properties,
and use these properties in some triggers.</p>

<a name="SourceCode" />
<h2>Source Code</h2>
<p>A Visual Studio 2008 solution with all relevant source code can be downloaded
<a href="DisplayingContent.zip">here</a>. The code is Copyright (c) Ivan Krivyakov.
It is distributed under <a href="http://www.apache.org/licenses/LICENSE-2.0.html">the Apache License</a>.</p>
</body>
</html>
